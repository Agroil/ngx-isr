{"version":3,"file":"ngx-isr.mjs","sources":["../../../projects/ngx-isr/src/lib/ngx-isr.service.ts","../../../projects/ngx-isr/src/lib/models/cache-handler.ts","../../../projects/ngx-isr/src/lib/cache-handlers/in-memory-cache-handler.ts","../../../projects/ngx-isr/src/lib/cache-handlers/index.ts","../../../projects/ngx-isr/src/lib/utils/render-url.ts","../../../projects/ngx-isr/src/lib/utils/get-isr-options.ts","../../../projects/ngx-isr/src/lib/cache-regeneration.ts","../../../projects/ngx-isr/src/lib/isr-handler.ts","../../../projects/ngx-isr/src/lib/http-errors.interceptor.ts","../../../projects/ngx-isr/src/lib/utils/add-isr-data-before-serialized.ts","../../../projects/ngx-isr/src/lib/ngx-isr.module.ts","../../../projects/ngx-isr/src/public-api.ts","../../../projects/ngx-isr/src/ngx-isr.ts"],"sourcesContent":["import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DOCUMENT, isPlatformServer } from '@angular/common';\nimport { ChildActivationEnd, Router } from '@angular/router';\nimport { filter, map, take } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nexport interface NgxIsrState {\n  revalidate: number | null;\n  errors: Error[];\n}\n\nconst initialState: NgxIsrState = {\n  revalidate: null,\n  errors: []\n}\n\n@Injectable({ providedIn: 'root' })\nexport class NgxIsrService {\n\n  protected state = new BehaviorSubject<NgxIsrState>(initialState);\n\n  getState(): NgxIsrState {\n    return this.state.getValue();\n  }\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Inject(DOCUMENT) private doc: Document,\n    private router: Router\n  ) {\n    if (isPlatformServer(this.platformId)) {\n      this.activate();\n    }\n  }\n\n  activate(): void {\n    this.router.events\n      .pipe(\n        filter((e) => e instanceof ChildActivationEnd),\n        map((event) => {\n          let snapshot = (event as ChildActivationEnd).snapshot;\n          while (snapshot.firstChild !== null) {\n            snapshot = snapshot.firstChild;\n          }\n          return snapshot.data;\n        }),\n        take(1)\n      )\n      .subscribe((data: any) => {\n        if (data?.['revalidate'] !== undefined) {\n          this.setRevalidate(data['revalidate']);\n        }\n      });\n  }\n\n  addError(err: HttpErrorResponse): void {\n    const currentErrors = this.getState().errors;\n    this.state.next({ ...this.getState(), errors: [ ...currentErrors, err ] });\n  }\n\n  setRevalidate = (revalidate: number | null): void => {\n    this.state.next({ ...this.getState(), revalidate });\n  }\n\n}\n","/**\n * Use the `revalidate` key in route data in order to define the time interval\n * that the ISR Handler should use in order to know when to regenerate a specific route.\n *\n *\n * Options:\n *\n * - Don't specify anything:\n *    The route won't be cached and will always be server-rendered. (Like SSR)\n *\n * - 0:\n *    First serve will be server-rendered and all the other ones will be served from cache. (Like SSG).\n *\n * - More than 0 (ex.: 5):\n *    First serve will be server-rendered and the cache will be regenerated every 5 seconds (after the last request).\n *\n * ### Example\n * ```typescript\n * const routes: Routes = [\n *   {\n *     path: \"one\",\n *     component: PageOneComponent\n *   },\n *   {\n *     path: \"two\",\n *     component: PageTwoComponent,\n *     data: { revalidate: 5 }\n *   },\n *   {\n *     path: \"three\",\n *     component: PageThreeComponent,\n *     data: { revalidate: 0 }\n *   }\n * ];\n * ```\n\n * - Path `one`:\n *    It won't be cached and will always be server-rendered before being served to the user.\n *\n * - Path `two`:\n *    The first request will be server-rendered and then will be cached.\n *    On the second request, it will be served from the cache that was saved on the first request.\n *    The url will be added to a regeneration queue, in order to re-generate the cache after `5` seconds.\n *    On the third request, if the regeneration was finished successfully\n *    the user will be served the regenerated page, otherwise he will be served with the old cached page.\n *\n * - Path `three`:\n *    The first request will be server-rendered and then will be cached.\n *    After the first request, all the other ones will be served from cache.\n *    So, the cache will never be refreshed automatically.\n *    The only way to refresh the cache is to make a request to /invalidate api route.\n */\nexport interface ISROptions {\n  revalidate: number | null; // none, 0, > 0\n  errors?: Error[];\n}\n\nexport interface CacheData {\n  html: string;\n  options: ISROptions;\n  createdAt: number;\n  deployId?: string; // TODO: this doesn't exist for Angular builds\n}\n\nexport abstract class CacheHandler {\n  abstract add(url: string, html: string, options?: ISROptions): Promise<void>\n\n  abstract get(url: string): Promise<CacheData>\n\n  abstract has(url: string): Promise<boolean>\n\n  abstract delete(url: string): Promise<boolean>\n\n  abstract getAll(): Promise<string[]>\n\n  abstract clearCache?(): Promise<boolean>\n}\n","import { CacheData, CacheHandler, ISROptions } from \"../models\";\n\nexport class InMemoryCacheHandler implements CacheHandler {\n  protected cache = new Map<string, CacheData>();\n\n  add(url: string, html: string, options: ISROptions = { revalidate: null }): Promise<void> {\n\n    const htmlWithMsg = html + cacheMsg(options.revalidate);\n\n    return new Promise((resolve, reject) => {\n      const cacheData: CacheData = {\n        html: htmlWithMsg,\n        options,\n        createdAt: Date.now()\n      };\n      this.cache.set(url, cacheData);\n      resolve();\n    })\n  }\n\n  get(url: string): Promise<CacheData> {\n    return new Promise((resolve, reject) => {\n      if(this.cache.has(url)) {\n        resolve(this.cache.get(url)!);\n      }\n      reject('This url does not exist in cache!');\n    })\n  }\n\n  getAll(): Promise<string[]> {\n    return new Promise((resolve, reject) => {\n      resolve(Array.from(this.cache.keys()))\n    })\n  }\n\n  has(url: string): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      resolve(this.cache.has(url));\n    })\n  }\n\n  delete(url: string): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      resolve(this.cache.delete(url));\n    })\n  }\n}\n\nconst cacheMsg = (revalidateTime?: number | null): string => {\n  const time = new Date().toISOString()\n    .replace(/T/, ' ')\n    .replace(/\\..+/, '')\n\n  let msg = '<!-- ';\n\n  msg += `\\n🚀 NgxISR: Served from cache! \\n⌛ Last updated: ${time}. `;\n\n  if (revalidateTime) {\n    msg += `\\n⏭️ Next refresh is after ${revalidateTime} seconds. `;\n  }\n\n  msg += ' \\n-->';\n\n  return msg;\n}\n","// export * from './filesystem-cache-handler';\nexport * from './in-memory-cache-handler';","import { APP_BASE_HREF } from '@angular/common';\nimport { Provider } from '@angular/core';\n\nexport interface RenderUrlConfig {\n  req: any;\n  res: any;\n  url: string;\n  indexHtml: string;\n  providers?: Provider[];\n}\n\n// helper method that generates html of an url\nexport const renderUrl = async (options: RenderUrlConfig): Promise<string> => {\n  const { req, res, url, indexHtml, providers } = options;\n\n  // we need to override url of req with the one we have in parameters\n  req.url = url;\n  req.originalUrl = url;\n\n  return new Promise((resolve, reject) => {\n    res.render(\n      indexHtml,\n      {\n        req,\n        providers: providers ?? [{ provide: APP_BASE_HREF, useValue: req.baseUrl }],\n      },\n      async (err: Error, html: string) => {\n        if (err) {\n          reject(err);\n        }\n        resolve(html);\n      }\n    );\n  });\n};\n","import { ISROptions } from '../models';\n\n// this script tag will be included in the page if one of the routes on the page\n// has `revalidate` key in its route data\nconst isrScriptTag = '<script id=\"isr-state\" type=\"application/json\">';\n\nexport function getISROptions(html: string): ISROptions {\n  const indexOfScriptTag = html?.indexOf(isrScriptTag);\n\n  // check if script tag is not included\n  if (!html || indexOfScriptTag === -1) {\n    return { revalidate: null, errors: [] };\n  }\n\n  const isrScript = html.substring(indexOfScriptTag); // start from script till the end of html file\n  const indexOfCloseScriptTag = isrScript.indexOf(\"</script>\"); // first occurrence of closing script tag\n\n  const val = isrScript\n    .substring(0, indexOfCloseScriptTag) // remove close script tag\n    .replace(isrScriptTag, \"\") // remove start script tag\n\n  return JSON.parse(val);\n}\n","import { Provider } from '@angular/core';\nimport { CacheData, CacheHandler } from './models';\nimport { renderUrl } from './utils/render-url';\nimport { getISROptions } from './utils/get-isr-options';\n\nexport class CacheRegeneration {\n  private urlsOnHold: string[] = []; // urls that have regeneration loading\n\n  constructor(public cache: CacheHandler, public indexHtml: string) {}\n\n  async regenerate(\n    req: any,\n    res: any,\n    cacheData: CacheData,\n    showLogs = false,\n    providers?: Provider[]\n  ): Promise<void> {\n    const { url } = req;\n\n    if (this.urlsOnHold.includes(url)) {\n      showLogs && console.log('Another regeneration is on-going...');\n      return;\n    }\n\n    const { options } = cacheData;\n    const { revalidate } = options;\n\n    showLogs &&\n      console.log(`The url: ${url} will be regenerated after ${revalidate} s.`);\n\n    this.urlsOnHold.push(url);\n\n    setTimeout(() => {\n      // re-render the page again\n      renderUrl({ req, res, url, indexHtml: this.indexHtml, providers }).then(\n        (html) => {\n          const { errors } = getISROptions(html);\n\n          if (errors?.length) {\n            showLogs && console.error('💥 ERROR: Url: ' + url + ' was not regenerated!', errors);\n            return;\n          }\n\n          // add the regenerated page to cache\n          this.cache.add(req.url, html, { revalidate }).then(() => {\n            // remove url from urlsOnHold\n            this.urlsOnHold = this.urlsOnHold.filter((x) => x !== url);\n            showLogs && console.log('Url: ' + url + ' was regenerated!');\n          });\n        }\n      );\n    }, revalidate! * 1000); // revalidate value is in seconds, so we convert it in milliseconds\n  }\n}\n","import {\n  CacheHandler,\n  InvalidateConfig,\n  ISRHandlerConfig,\n  RenderConfig,\n  ServeFromCacheConfig,\n} from './models';\nimport { InMemoryCacheHandler } from './cache-handlers';\nimport { renderUrl, RenderUrlConfig } from './utils/render-url';\nimport { getISROptions } from './utils/get-isr-options';\nimport { CacheRegeneration } from './cache-regeneration';\n\nexport class ISRHandler {\n  protected cache!: CacheHandler;\n  protected cacheRegeneration!: CacheRegeneration;\n\n  protected isrConfig: ISRHandlerConfig;\n  protected readonly showLogs: boolean = false;\n\n  constructor(config?: ISRHandlerConfig) {\n    if (!config) {\n      throw new Error('Provide ISRHandlerConfig!');\n    }\n\n    this.isrConfig = config;\n    this.showLogs = config?.enableLogging ?? false;\n\n    // if skipCachingOnHttpError is not provided it will default to true\n    this.isrConfig.skipCachingOnHttpError = config?.skipCachingOnHttpError !== false;\n\n    if (config.cache && config.cache instanceof CacheHandler) {\n      this.cache = config.cache;\n    } else {\n      this.cache = new InMemoryCacheHandler();\n    }\n\n    this.cacheRegeneration = new CacheRegeneration(\n      this.cache,\n      config.indexHtml\n    );\n  }\n\n  async invalidate(\n    req: any,\n    res: any,\n    config?: InvalidateConfig\n  ): Promise<any> {\n    const { secretToken, urlToInvalidate } = extractData(req);\n\n    if (secretToken !== this.isrConfig.invalidateSecretToken) {\n      res.json({ status: 'error', message: 'Your secret token is wrong!!!' });\n    }\n\n    if (!urlToInvalidate) {\n      res.json({\n        status: 'error',\n        message: 'Please add `urlToInvalidate` query param in your url',\n      });\n    }\n\n    if (urlToInvalidate) {\n      if (!(await this.cache.has(urlToInvalidate))) {\n        res.json({\n          status: 'error',\n          message: \"The url you provided doesn't exist in cache!\",\n        });\n      }\n\n      try {\n        // re-render the page again\n        const html = await renderUrl({\n          req,\n          res,\n          url: urlToInvalidate,\n          indexHtml: this.isrConfig.indexHtml,\n          providers: config?.providers,\n        });\n\n        // get revalidate data in order to set it to cache data\n        const { revalidate, errors } = getISROptions(html);\n\n        // if there are errors when rendering the site we throw an error\n        if (errors?.length && this.isrConfig.skipCachingOnHttpError) {\n          throw new Error('The new rendered page had errors: \\n' + JSON.stringify(errors));\n        }\n\n        // add the regenerated page to cache\n        await this.cache.add(req.url, html, { revalidate });\n\n        this.showLogs &&\n        console.log(`Url: ${ urlToInvalidate } was regenerated!`);\n\n        res.json({\n          status: 'success',\n          message: `Url: ${ urlToInvalidate } was regenerated!`,\n        });\n      } catch (err) {\n        res.json({\n          status: 'error',\n          message: 'Error while regenerating url!!',\n          err\n        });\n      }\n    }\n  }\n\n  async serveFromCache(\n    req: any,\n    res: any,\n    next: any,\n    config?: ServeFromCacheConfig\n  ): Promise<any> {\n    try {\n      const cacheData = await this.cache.get(req.url);\n      const { html, options, createdAt } = cacheData;\n\n      // const lastCacheDateDiff = (Date.now() - createdAt) / 1000; // in seconds\n      if (options.revalidate && options.revalidate > 0) {\n        await this.cacheRegeneration.regenerate(\n          req,\n          res,\n          cacheData,\n          this.showLogs,\n          config?.providers\n        );\n      }\n\n      // Cache exists. Send it.\n      this.showLogs && console.log('Page was retrieved from cache: ', req.url);\n      res.send(html);\n    } catch (error) {\n      // Cache does not exist. Serve user using SSR\n      next();\n    }\n  }\n\n  async render(req: any, res: any, next: any, config?: RenderConfig): Promise<any> {\n    const renderUrlConfig: RenderUrlConfig = {\n      req,\n      res,\n      url: req.url,\n      indexHtml: this.isrConfig.indexHtml,\n      providers: config?.providers\n    };\n\n    renderUrl(renderUrlConfig).then(\n      async (html) => {\n        const { revalidate, errors } = getISROptions(html);\n\n        // if we have any http errors when rendering the site, and we have skipCachingOnHttpError enabled\n        // we don't want to cache it, and, we will fall back to client side rendering\n        if (errors?.length && this.isrConfig.skipCachingOnHttpError) {\n          this.showLogs && console.log('Http errors: \\n', errors);\n          res.send(html);\n          return;\n        }\n\n        // if revalidate is null we won't cache it\n        // if revalidate is 0, we will never clear the cache automatically\n        // if revalidate is x, we will clear cache every x seconds (after the last request) for that url\n\n        if (revalidate === null || revalidate === undefined) { // don't do !revalidate because it will also catch \"0\"\n          res.send(html);\n          return;\n        }\n\n        // Cache the rendered `html` for this request url to use for subsequent requests\n        await this.cache.add(req.url, html, { revalidate });\n        res.send(html);\n      }\n    );\n\n  }\n}\n\nconst extractData = (req: any) => {\n  return {\n    secretToken: req.query['secret'] || null,\n    urlToInvalidate: req.query['urlToInvalidate'] || null,\n    // urlsToInvalidate: req.body.urls || [],\n  };\n};\n","import { Injectable, Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { catchError, Observable, throwError } from 'rxjs';\nimport { NgxIsrService } from './ngx-isr.service';\n\n@Injectable()\nexport class HttpErrorsInterceptor implements HttpInterceptor {\n\n  constructor(private ngxIsrService: NgxIsrService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n      catchError(err => {\n        this.ngxIsrService.addError(err);\n        return throwError(() => err);\n      })\n    );\n  }\n}\n\nexport const HTTP_ERROR_PROVIDER_ISR: Provider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: HttpErrorsInterceptor,\n  multi: true,\n}\n","import { NgxIsrService, NgxIsrState } from '../ngx-isr.service';\n\nexport function addIsrDataBeforeSerialized(isrService: NgxIsrService, doc: Document): () => Promise<void> {\n  return () => addISRDataToBody(doc, isrService.getState());\n}\n\n// append script with revalidate and errors data for the current route\nfunction addISRDataToBody(doc: Document, { revalidate, errors }: NgxIsrState): Promise<void> {\n  return new Promise<void>(resolve => {\n    const script = doc.createElement('script');\n    script.id = 'isr-state';\n    script.setAttribute('type', 'application/json');\n    script.textContent = JSON.stringify({ revalidate, errors });\n    doc.body.appendChild(script);\n    resolve();\n  })\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { NgxIsrService } from './ngx-isr.service';\nimport { HTTP_ERROR_PROVIDER_ISR } from './http-errors.interceptor';\nimport { BEFORE_APP_SERIALIZED } from '@angular/platform-server';\nimport { addIsrDataBeforeSerialized } from './utils/add-isr-data-before-serialized';\nimport { DOCUMENT } from '@angular/common';\n\n@NgModule({ providers: [ NgxIsrService ] })\nexport class NgxIsrModule {\n  constructor(private isrService: NgxIsrService) {}\n\n  static forRoot(): ModuleWithProviders<NgxIsrModule> {\n    return {\n      ngModule: NgxIsrModule,\n      providers: [\n        NgxIsrService,\n        HTTP_ERROR_PROVIDER_ISR,\n        {\n          provide: BEFORE_APP_SERIALIZED,\n          useFactory: addIsrDataBeforeSerialized,\n          multi: true,\n          deps: [ NgxIsrService, DOCUMENT ]\n        },\n      ]\n    }\n  }\n\n}\n","/*\n * Public API Surface of ngx-isr\n */\n\nexport * from './lib/ngx-isr.service';\nexport * from './lib/isr-handler';\n\nexport { InMemoryCacheHandler } from './lib/cache-handlers';\n\nexport { NgxIsrModule } from './lib/ngx-isr.module';\n\nexport * from './lib/models';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.NgxIsrService"],"mappings":"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"}